#![doc = "Peripheral access API for HEADSAIL microcontrollers (generated using svd2rust v0.28.0 ( ))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next]
svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.28.0/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#![deny(dead_code)]
#![deny(improper_ctypes)]
#![deny(missing_docs)]
#![deny(no_mangle_generic_items)]
#![deny(non_shorthand_field_patterns)]
#![deny(overflowing_literals)]
#![deny(path_statements)]
#![deny(patterns_in_fns_without_body)]
#![deny(private_in_public)]
#![deny(unconditional_recursion)]
#![deny(unused_allocation)]
#![deny(unused_comparisons)]
#![deny(unused_parens)]
#![deny(while_true)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![no_std]
use core::marker::PhantomData;
use core::ops::Deref;
#[doc = r"Number available in the NVIC for configuring priority"]
pub const NVIC_PRIO_BITS: u8 = 2;
#[allow(unused_imports)]
use generic::*;
#[doc = r"Common register and bit access and modify traits"]
pub mod generic;
extern "C" {}
#[doc(hidden)]
pub union Vector {
    pub _handler: unsafe extern "C" fn(),
    pub _reserved: usize,
}
#[doc(hidden)]
#[no_mangle]
pub static __EXTERNAL_INTERRUPTS: [Vector; 0] = [];
#[doc = "C2C_config"]
pub struct C2C_CONFIG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for C2C_CONFIG {}
impl C2C_CONFIG {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const c2c_config::RegisterBlock = 0xffb0_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const c2c_config::RegisterBlock {
        Self::PTR
    }
}
impl Deref for C2C_CONFIG {
    type Target = c2c_config::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for C2C_CONFIG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("C2C_CONFIG").finish()
    }
}
#[doc = "C2C_config"]
pub mod c2c_config;
#[doc = "C2C_serial_config"]
pub struct C2C_SERIAL_CONFIG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for C2C_SERIAL_CONFIG {}
impl C2C_SERIAL_CONFIG {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const c2c_serial_config::RegisterBlock = 0xffc0_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const c2c_serial_config::RegisterBlock {
        Self::PTR
    }
}
impl Deref for C2C_SERIAL_CONFIG {
    type Target = c2c_serial_config::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for C2C_SERIAL_CONFIG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("C2C_SERIAL_CONFIG").finish()
    }
}
#[doc = "C2C_serial_config"]
pub mod c2c_serial_config;
#[doc = "confReg"]
pub struct CONF_REG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CONF_REG {}
impl CONF_REG {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const conf_reg::RegisterBlock = 0xff60_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const conf_reg::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CONF_REG {
    type Target = conf_reg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CONF_REG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CONF_REG").finish()
    }
}
#[doc = "confReg"]
pub mod conf_reg;
#[doc = "mdio_map0"]
pub struct MDIO_MAP0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MDIO_MAP0 {}
impl MDIO_MAP0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mdio_map0::RegisterBlock = 0xff60_0200 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mdio_map0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MDIO_MAP0 {
    type Target = mdio_map0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MDIO_MAP0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDIO_MAP0").finish()
    }
}
#[doc = "mdio_map0"]
pub mod mdio_map0;
#[doc = "mdio_map1"]
pub struct MDIO_MAP1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MDIO_MAP1 {}
impl MDIO_MAP1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mdio_map1::RegisterBlock = 0xff60_0400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mdio_map1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MDIO_MAP1 {
    type Target = mdio_map1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MDIO_MAP1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDIO_MAP1").finish()
    }
}
#[doc = "mdio_map1"]
pub mod mdio_map1;
#[doc = "i2c"]
pub struct I2C {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2C {}
impl I2C {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const i2c::RegisterBlock = 0xfff0_5000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const i2c::RegisterBlock {
        Self::PTR
    }
}
impl Deref for I2C {
    type Target = i2c::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for I2C {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C").finish()
    }
}
#[doc = "i2c"]
pub mod i2c;
#[doc = "spi_master0"]
pub struct SPI_MASTER0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI_MASTER0 {}
impl SPI_MASTER0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const spi_master0::RegisterBlock = 0xfff0_2000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const spi_master0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SPI_MASTER0 {
    type Target = spi_master0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SPI_MASTER0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI_MASTER0").finish()
    }
}
#[doc = "spi_master0"]
pub mod spi_master0;
#[doc = "spi_master1"]
pub struct SPI_MASTER1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI_MASTER1 {}
impl SPI_MASTER1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const spi_master1::RegisterBlock = 0xfff0_3000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const spi_master1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SPI_MASTER1 {
    type Target = spi_master1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SPI_MASTER1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI_MASTER1").finish()
    }
}
#[doc = "spi_master1"]
pub mod spi_master1;
#[doc = "uart0"]
pub struct UART0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART0 {}
impl UART0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const uart0::RegisterBlock = 0xfff0_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART0 {
    type Target = uart0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART0").finish()
    }
}
#[doc = "uart0"]
pub mod uart0;
#[doc = "uart1"]
pub struct UART1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART1 {}
impl UART1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const uart1::RegisterBlock = 0xfff0_1000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART1 {
    type Target = uart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART1").finish()
    }
}
#[doc = "uart1"]
pub mod uart1;
#[doc = "sdram_cfg"]
pub struct SDRAM_CFG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SDRAM_CFG {}
impl SDRAM_CFG {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sdram_cfg::RegisterBlock = 0xffd0_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sdram_cfg::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SDRAM_CFG {
    type Target = sdram_cfg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SDRAM_CFG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SDRAM_CFG").finish()
    }
}
#[doc = "sdram_cfg"]
pub mod sdram_cfg;
#[doc = "SYSCTRL"]
pub struct SYSCTRL {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SYSCTRL {}
impl SYSCTRL {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sysctrl::RegisterBlock = 0x0010_1000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sysctrl::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SYSCTRL {
    type Target = sysctrl::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SYSCTRL {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SYSCTRL").finish()
    }
}
#[doc = "SYSCTRL"]
pub mod sysctrl;
#[doc = "The Excel of Register Map can be found here. https://tuni.sharepoint.com/:x:/r/sites/TG-SoC-Hub/_layouts/15/Doc.aspx?sourcedoc=%7B971A5DEF-758E-4A18-8EA3-0F3F2D60F0BB%7D&file=DMA_register_map.xlsx&action=default&mobileredirect=true&cid=419a13fc-9dbd-45b9-8f31-77899c555ace DMA Sub System Document available in below link: https://tuni.sharepoint.com/:w:/r/sites/TG-SoC-Hub/_layouts/15/Doc.aspx?sourcedoc=%7B9E9DFD0D-B0CA-436B-ABA0-57DB3B73560E%7D&file=DMA_Sub_System_Document.....docx&action=default&mobileredirect=true"]
pub struct DMA0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DMA0 {}
impl DMA0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const dma0::RegisterBlock = 0xffa0_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const dma0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DMA0 {
    type Target = dma0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DMA0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DMA0").finish()
    }
}
#[doc = "The Excel of Register Map can be found here. https://tuni.sharepoint.com/:x:/r/sites/TG-SoC-Hub/_layouts/15/Doc.aspx?sourcedoc=%7B971A5DEF-758E-4A18-8EA3-0F3F2D60F0BB%7D&file=DMA_register_map.xlsx&action=default&mobileredirect=true&cid=419a13fc-9dbd-45b9-8f31-77899c555ace DMA Sub System Document available in below link: https://tuni.sharepoint.com/:w:/r/sites/TG-SoC-Hub/_layouts/15/Doc.aspx?sourcedoc=%7B9E9DFD0D-B0CA-436B-ABA0-57DB3B73560E%7D&file=DMA_Sub_System_Document.....docx&action=default&mobileredirect=true"]
pub mod dma0;
#[doc = "The Excel of Register Map can be found here. https://tuni.sharepoint.com/:x:/r/sites/TG-SoC-Hub/_layouts/15/Doc.aspx?sourcedoc=%7B971A5DEF-758E-4A18-8EA3-0F3F2D60F0BB%7D&file=DMA_register_map.xlsx&action=default&mobileredirect=true&cid=419a13fc-9dbd-45b9-8f31-77899c555ace DMA Sub System Document available in below link: https://tuni.sharepoint.com/:w:/r/sites/TG-SoC-Hub/_layouts/15/Doc.aspx?sourcedoc=%7B9E9DFD0D-B0CA-436B-ABA0-57DB3B73560E%7D&file=DMA_Sub_System_Document.....docx&action=default&mobileredirect=true"]
pub struct DMA1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DMA1 {}
impl DMA1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const dma1::RegisterBlock = 0xffa0_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const dma1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DMA1 {
    type Target = dma1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DMA1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DMA1").finish()
    }
}
#[doc = "The Excel of Register Map can be found here. https://tuni.sharepoint.com/:x:/r/sites/TG-SoC-Hub/_layouts/15/Doc.aspx?sourcedoc=%7B971A5DEF-758E-4A18-8EA3-0F3F2D60F0BB%7D&file=DMA_register_map.xlsx&action=default&mobileredirect=true&cid=419a13fc-9dbd-45b9-8f31-77899c555ace DMA Sub System Document available in below link: https://tuni.sharepoint.com/:w:/r/sites/TG-SoC-Hub/_layouts/15/Doc.aspx?sourcedoc=%7B9E9DFD0D-B0CA-436B-ABA0-57DB3B73560E%7D&file=DMA_Sub_System_Document.....docx&action=default&mobileredirect=true"]
pub mod dma1;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r" All the peripherals."]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "C2C_CONFIG"]
    pub C2C_CONFIG: C2C_CONFIG,
    #[doc = "C2C_SERIAL_CONFIG"]
    pub C2C_SERIAL_CONFIG: C2C_SERIAL_CONFIG,
    #[doc = "CONF_REG"]
    pub CONF_REG: CONF_REG,
    #[doc = "MDIO_MAP0"]
    pub MDIO_MAP0: MDIO_MAP0,
    #[doc = "MDIO_MAP1"]
    pub MDIO_MAP1: MDIO_MAP1,
    #[doc = "I2C"]
    pub I2C: I2C,
    #[doc = "SPI_MASTER0"]
    pub SPI_MASTER0: SPI_MASTER0,
    #[doc = "SPI_MASTER1"]
    pub SPI_MASTER1: SPI_MASTER1,
    #[doc = "UART0"]
    pub UART0: UART0,
    #[doc = "UART1"]
    pub UART1: UART1,
    #[doc = "SDRAM_CFG"]
    pub SDRAM_CFG: SDRAM_CFG,
    #[doc = "SYSCTRL"]
    pub SYSCTRL: SYSCTRL,
    #[doc = "DMA0"]
    pub DMA0: DMA0,
    #[doc = "DMA1"]
    pub DMA1: DMA1,
}
impl Peripherals {
    #[doc = r" Returns all the peripherals *once*."]
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    #[doc = r" Unchecked version of `Peripherals::take`."]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Each of the returned peripherals must be used at most once."]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            C2C_CONFIG: C2C_CONFIG {
                _marker: PhantomData,
            },
            C2C_SERIAL_CONFIG: C2C_SERIAL_CONFIG {
                _marker: PhantomData,
            },
            CONF_REG: CONF_REG {
                _marker: PhantomData,
            },
            MDIO_MAP0: MDIO_MAP0 {
                _marker: PhantomData,
            },
            MDIO_MAP1: MDIO_MAP1 {
                _marker: PhantomData,
            },
            I2C: I2C {
                _marker: PhantomData,
            },
            SPI_MASTER0: SPI_MASTER0 {
                _marker: PhantomData,
            },
            SPI_MASTER1: SPI_MASTER1 {
                _marker: PhantomData,
            },
            UART0: UART0 {
                _marker: PhantomData,
            },
            UART1: UART1 {
                _marker: PhantomData,
            },
            SDRAM_CFG: SDRAM_CFG {
                _marker: PhantomData,
            },
            SYSCTRL: SYSCTRL {
                _marker: PhantomData,
            },
            DMA0: DMA0 {
                _marker: PhantomData,
            },
            DMA1: DMA1 {
                _marker: PhantomData,
            },
        }
    }
}
